/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package swig.org.gphoto2;

public class GPPortSettings {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public GPPortSettings(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(GPPortSettings obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        gphoto2JNI.delete_GPPortSettings(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setSerial(GPPortSettingsSerial value) {
    gphoto2JNI.GPPortSettings_serial_set(swigCPtr, this, GPPortSettingsSerial.getCPtr(value), value);
  }

  public GPPortSettingsSerial getSerial() {
    long cPtr = gphoto2JNI.GPPortSettings_serial_get(swigCPtr, this);
    return (cPtr == 0) ? null : new GPPortSettingsSerial(cPtr, false);
  }

  public void setUsb(GPPortSettingsUSB value) {
    gphoto2JNI.GPPortSettings_usb_set(swigCPtr, this, GPPortSettingsUSB.getCPtr(value), value);
  }

  public GPPortSettingsUSB getUsb() {
    long cPtr = gphoto2JNI.GPPortSettings_usb_get(swigCPtr, this);
    return (cPtr == 0) ? null : new GPPortSettingsUSB(cPtr, false);
  }

  public void setDisk(GPPortSettingsDisk value) {
    gphoto2JNI.GPPortSettings_disk_set(swigCPtr, this, GPPortSettingsDisk.getCPtr(value), value);
  }

  public GPPortSettingsDisk getDisk() {
    long cPtr = gphoto2JNI.GPPortSettings_disk_get(swigCPtr, this);
    return (cPtr == 0) ? null : new GPPortSettingsDisk(cPtr, false);
  }

  public void setUsbdiskdirect(GPPortSettingsUsbDiskDirect value) {
    gphoto2JNI.GPPortSettings_usbdiskdirect_set(swigCPtr, this, GPPortSettingsUsbDiskDirect.getCPtr(value), value);
  }

  public GPPortSettingsUsbDiskDirect getUsbdiskdirect() {
    long cPtr = gphoto2JNI.GPPortSettings_usbdiskdirect_get(swigCPtr, this);
    return (cPtr == 0) ? null : new GPPortSettingsUsbDiskDirect(cPtr, false);
  }

  public void setUsbscsi(GPPortSettingsUsbScsi value) {
    gphoto2JNI.GPPortSettings_usbscsi_set(swigCPtr, this, GPPortSettingsUsbScsi.getCPtr(value), value);
  }

  public GPPortSettingsUsbScsi getUsbscsi() {
    long cPtr = gphoto2JNI.GPPortSettings_usbscsi_get(swigCPtr, this);
    return (cPtr == 0) ? null : new GPPortSettingsUsbScsi(cPtr, false);
  }

  public GPPortSettings() {
    this(gphoto2JNI.new_GPPortSettings(), true);
  }

}
